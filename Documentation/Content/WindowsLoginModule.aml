<?xml version="1.0" encoding="utf-8"?>
<topic id="26BED49A-C11C-4e40-9D0F-1B5ACECFCEF4" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        Waffle implements a standard Java Authentication and Authorization login module that can be notably used with
        a JAAS realm to authenticate Windows users in Tomcat. This enables you to add a BASIC, DIGEST or FORMS login to
        your application and authenticate against a Windows Active Directory using Windows local or domain groups as
        means of authorization.
      </para>
    </introduction>
    <section address="configuration">
      <title>Configuring Tomcat</title>
      <content>
        <para>
          The following steps are required to configure Tomcat with Waffle authenticator.
          <list class="ordered">
            <listItem>
              Package <localUri>waffle-jna.jar</localUri>, <localUri>commons-logging-1.1.1.jar</localUri>,
              <localUri>guava-r07.jar</localUri>, <localUri>jna.jar</localUri> and <localUri>platform.jar</localUri> 
              in your application's <localUri>lib</localUri> directory or copy them to Tomcat's <localUri>lib</localUri>.
            </listItem>
            <listItem>
              Add a JAAS realm to the application context. Modify <localUri>META-INF\context.xml</localUri>.
              <code lang="xml">
                <![CDATA[
<?xml version='1.0' encoding='utf-8'?>
<Context>
 <Realm className="org.apache.catalina.realm.JAASRealm" 
    appName="Jaas" 
    userClassNames="waffle.jaas.UserPrincipal" 
    roleClassNames="waffle.jaas.RolePrincipal"
    useContextClassLoader="false" 
    debug="false" />
</Context>]]>
              </code>
            </listItem>
            <listItem>
              Enable BASIC, DIGEST or FORMS authentication for this realm. Modify <localUri>WEB-INF\web.xml</localUri>.
              <code lang="xml">
                <![CDATA[
<login-config>
	<auth-method>BASIC</auth-method>
	<realm-name>Jaas</realm-name>
</login-config>]]>
              </code>
            </listItem>
            <listItem>
              Configure security roles in <localUri>WEB-INF\web.xml</localUri>. The Waffle login module adds all
              user's security groups (including nested and domain groups) as roles during authentication.
              <code lang="xml">
                <![CDATA[
<security-role>
  <role-name>Everyone</role-name>
</security-role>]]>
              </code>
            </listItem>
            <listItem>
              Restrict access to website resources. For example, to restrict the entire website to locally authenticated
              users add the following in <localUri>WEB-INF\web.xml</localUri>.
              <code lang="xml">
                <![CDATA[
<security-constraint>
  <web-resource-collection>
    <web-resource-name>
      Demo Application
    </web-resource-name>
    <url-pattern>/*</url-pattern>
    <http-method>GET</http-method>
    <http-method>POST</http-method>
  </web-resource-collection>
  <auth-constraint>
    <role-name>Everyone</role-name>
  </auth-constraint>
</security-constraint>]]>
              </code>
            </listItem>
          </list>
        </para>
      </content>
    </section>
    <section name="loginconf">
      <title>Login.conf</title>
      <content>
        <para>
          Create a login configuration file, <localUri>login.conf</localUri>.
          This configuration file specifies how to plug the Waffle Windows Login Module.
          <code lang="properties">
            <![CDATA[
Jaas {
    waffle.jaas.WindowsLoginModule sufficient debug=false;
};
]]>
          </code>
          The <localUri>login.conf</localUri> configuration file is passed to Java with
          <command>-Djava.security.auth.login.config=&lt;path-to-file&gt;/login.conf</command>.
        </para>
        <para>
          The following options are supported by the module.
          <tableDefinition>
            <definedTerm>debug</definedTerm>
            <definition>
              Set to "true" to enable debug mode. In debug mode the module will output information about
              successful logins, including group memberships.
            </definition>
            <definedTerm>principalFormat</definedTerm>
            <definition>Specifies the name format for the principal.</definition>
            <definedTerm>roleFormat</definedTerm>
            <definition>Specifies the name format for the role.</definition>
            <definedTerm>allowGuestLogin</definedTerm>
            <definition>
              Allow guest login. When <literal>true</literal> and the system's Guest account is enabled,
              any invalid login succeeds as Guest.
              <alert class="note">
                <para>
                  While the default value of <literal>allowGuestLogin</literal> is true, it is recommended
                  that you disable the system's Guest account to disallow Guest login. This option is provided
                  for systems where you don't have administrative privileges.
                </para>
              </alert>
            </definition>
          </tableDefinition>
          The following principal and role formats are available.
          <tableDefinition>
            <definedTerm>fqn</definedTerm>
            <definition>
              Fully qualified names, such as domain\group. When unavailable, a SID is used.
              This is the default.
            </definition>
            <definedTerm>sid</definedTerm>
            <definition>
              Group SID in the S- format.
            </definition>
            <definedTerm>both</definedTerm>
            <definition>
              Both a fully qualified name and a SID in the S- format.
              When a group name is not available, a SID is used.
            </definition>
            <definedTerm>none</definedTerm>
            <definition>
              Available for <literal>roleFormat</literal> only.
              Do not retrieve roles.
            </definition>
          </tableDefinition>
        </para>
      </content>
    </section>
    <section name="loginconf">
      <title>Jaas.policy</title>
      <content>
        <para>
          Create JAAS policy configuration file, <localUri>jaas.policy</localUri>.
          This file specifies which identities are granted which permissions.
          <code lang="properties">
            <![CDATA[
grant Principal * * {
  permission java.security.AllPermission "/*";
};
]]>
          </code>
          The policy file is passed to Java with
          <command>-Djava.security.auth.policy=&lt;path-to-file&gt;/jaas.policy</command>.
        </para>
      </content>
    </section>
    <section name="startingtomcat">
      <title>Starting Tomcat w/ Security Manager</title>
      <content>
        <para>
          You must start Tomcat with Security Manager enabled (<command>-security</command>) and configure it
          with a login configuration and policy. For example, the following will start Tomcat using the demo
          <localUri>login.conf</localUri> and <localUri>jaas.policy</localUri> from the Waffle samples.
          <code lang="bat">
            <![CDATA[
@echo off
setlocal
set JAVA_OPTS=-Djava.security.auth.login.config="C:/Program Files/Tomcat/webapps/waffle-jaas/login.conf" -Djava.security.auth.policy="C:/Program Files/Tomcat/webapps/waffle-jaas/jaas.policy"
call bin/catalina.bat run -security
endlocal
            ]]>
          </code>
        </para>
      </content>
    </section>
    <section address="troubleshooting">
      <title>Troubleshooting</title>
      <content>
        <para>
          <list class="bullet">
            <listItem>
              Most issues are caused by an incorrect JAAS configuration. Enable JAAS logging by adding the following to
              <localUri>conf\logging.properties</localUri> in your Tomcat installation.
              <code lang="properties">
                <![CDATA[
org.apache.catalina.realm.level = FINE
                ]]>
              </code>
            </listItem>
            <listItem>
              Restart Tomcat and review <localUri>logs\Catalina*.log</localUri>.
            </listItem>
          </list>
        </para>
      </content>
    </section>
    <section address="demoapplication">
      <title>Waffle JAAS Demo</title>
      <content>
        <para>
          A demo application can be found in the Waffle distribution in the <localUri>Samples\waffle-jaas</localUri>
          directory. Copy the entire directory into Tomcat's <localUri>webapps</localUri> directory and navigate to
          <ficticiousUri>http://localhost:8080/waffle-jaas/</ficticiousUri>.
        </para>
      </content>
    </section>
    <relatedTopics>
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="DE48FFDF-69F6-4a8f-A24A-4D27F5A53C82" />
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="610B3ED3-3F1B-4759-8F97-80C3C88C89EB" />
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="D665805A-215E-44e6-8CC5-4519B8844455" />
      <link topicType_id="1FE70836-AA7D-4515-B54B-E10C4B516E50" xlink:href="ABA7606B-08F8-49e2-A973-8FBE62649118" />
    </relatedTopics>
  </developerConceptualDocument>
</topic>