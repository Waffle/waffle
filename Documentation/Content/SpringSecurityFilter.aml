<?xml version="1.0" encoding="utf-8"?>
<topic id="9E607F50-A40B-4872-8B5E-584D98E76DE2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The Waffle Spring-Security Filter implements the Negotiate and Basic protocols with Kerberos and NTLM single sign-on support
        for web applications that utilize Spring-Security. This allows users to browse to a Windows intranet site without having to
        re-enter credentials for browsers that support Kerberos or NTLM and to fall back to Basic authentication for those that do
        not. For more information about Spring-Security see <externalLink>
          <linkUri>http://static.springsource.org/spring-security/site/</linkUri>
          <linkText>http://static.springsource.org/spring-security/site/</linkText>
        </externalLink>.
      </para>
    </introduction>
    <section address="configuration">
      <title>Configuring Spring Security</title>
      <content>
        <para>
          The following steps are required to configure a web server with the Waffle Spring-Security Filter.
          <list class="ordered">
            <listItem>
              We'll assume that Spring-Security is configured via <localUri>web.xml</localUri> with a filter chain and a
              Spring context loader listener. The Waffle beans configuration will be added to
              <localUri>waffle-filter.xml</localUri>.
              <code lang="xml">
                <![CDATA[
<filter>
	<filter-name>springSecurityFilterChain</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
	<filter-name>springSecurityFilterChain</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/waffle-filter.xml</param-value> 
</context-param>
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
                ]]>
              </code>
            </listItem>
            <listItem>
              Copy <localUri>waffle-jna.jar</localUri>, <localUri>commons-logging-1.1.1.jar</localUri>,
              <localUri>guava-r07.jar</localUri>, <localUri>jna.jar</localUri> and <localUri>platform.jar</localUri> to 
              the application's <localUri>lib</localUri> directory or copy them to your web server's <localUri>lib</localUri>, 
              along with Spring and Spring-Security JARs.
            </listItem>
            <listItem>
              Declare a Windows Authentication provider. This is the link between Waffle and the operating system.
              <code lang="xml">
                <![CDATA[
<bean id="waffleWindowsAuthProvider" class="waffle.windows.auth.impl.WindowsAuthProviderImpl" />
                ]]>
              </code>
            </listItem>
            <listItem>
              Declare a collection of Waffle security filter providers that implement various authentication protocols.
              <code lang="xml">
                <![CDATA[
<bean id="negotiateSecurityFilterProvider" class="waffle.servlet.spi.NegotiateSecurityFilterProvider">
	<constructor-arg ref="waffleWindowsAuthProvider" />
</bean>

<bean id="basicSecurityFilterProvider" class="waffle.servlet.spi.BasicSecurityFilterProvider">
	<constructor-arg ref="waffleWindowsAuthProvider" />
</bean>

<bean id="waffleSecurityFilterProviderCollection" class="waffle.servlet.spi.SecurityFilterProviderCollection">
	<constructor-arg>
		<list>
			<ref bean="negotiateSecurityFilterProvider" />   			
			<ref bean="basicSecurityFilterProvider" />   			
		</list>
	</constructor-arg>
</bean>]]>
              </code>
            </listItem>
            <listItem>
              Add the Waffle security filter and entry point to the <literal>sec:http</literal> configuration section.
              The filter will be placed before the BASIC authentication filter that ships with Spring-Security.
              The filter uses the collection of authentication filter providers defined above to perform authentication.
              <code lang="xml">
                <![CDATA[
<sec:http entry-point-ref="negotiateSecurityFilterEntryPoint">
	<sec:intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
	<sec:custom-filter ref="waffleNegotiateSecurityFilter" position="BASIC_AUTH_FILTER" />
</sec:http>

<bean id="negotiateSecurityFilterEntryPoint" class="waffle.spring.NegotiateSecurityFilterEntryPoint">
	<property name="Provider" ref="waffleSecurityFilterProviderCollection" />
</bean>]]>
              </code>
            </listItem>
            <listItem>
              Define a required default Spring-Security authentication manager.
              <code lang="xml">
                <![CDATA[
<sec:authentication-manager alias="authenticationProvider" />]]>
              </code>
            </listItem>
            <listItem>
              Define a Spring-Security filter that uses the collection of security filter providers to perform authentication.
              <code lang="xml">
                <![CDATA[
<bean id="waffleNegotiateSecurityFilter" class="waffle.spring.NegotiateSecurityFilter">
	<property name="Provider" ref="waffleSecurityFilterProviderCollection" />
</bean>]]>
              </code>
            </listItem>
          </list>
        </para>
      </content>
    </section>
    <section address="authproviderroles">
      <title>Granted Authorities</title>
      <content>
        <para>
          Upon successful login, Waffle will populate Spring Security's <literal>Authentication</literal>
          instance with <literal>GrantedAuthority</literal> objects.
        </para>
        <para>
          By default, Waffle will populate the <literal>Authentication</literal> instance with the following 
          <literal>GrantedAuthority</literal> objects:
          <list class="bullet">
            <listItem>
              A <literal>GrantedAuthority</literal> with the string <literal>ROLE_USER</literal>.
            </listItem>
            <listItem>
              One <literal>GrantedAuthority</literal> per group to which the user belongs.  The <literal>GrantedAuthority</literal>
              strings will be the uppercase group name prefixed with <literal>ROLE_</literal>. For example, if a user is a member 
              of the <literal>Everyone</literal> group, he obtains the <literal>ROLE_EVERYONE</literal> granted authority.
            </listItem>
          </list>
        </para>
        <para>
          The default behavior can be changed by configuring a different <literal>defaultGrantedAuthority</literal> and
          <literal>grantedAuthorityFactory</literal> on the <literal>waffleNegotiateSecurityFilter</literal> object.
        </para>
      </content>
    </section>
    <section address="waffleNegotiateSecurityFilter_options">
      <title>Security Filter Options</title>
      <content>
        <para>
          The <newTerm>waffleNegotiateSecurityFilter</newTerm> bean can be configured with the following options.
          <tableDefinition>
            <definedTerm>principalFormat</definedTerm>
            <definition>Specifies the name format for the principal.</definition>
            <definedTerm>roleFormat</definedTerm>
            <definition>Specifies the name format for the role.</definition>
            <definedTerm>allowGuestLogin</definedTerm>
            <definition>
              Allow guest login. When <literal>true</literal> and the system's Guest account is enabled,
              any invalid login succeeds as Guest.
              <alert class="note">
                <para>
                  While the default value of <literal>allowGuestLogin</literal> is true, it is recommended
                  that you disable the system's Guest account to disallow Guest login. This option is provided
                  for systems where you don't have administrative privileges.
                </para>
              </alert>
            </definition>
            <definedTerm>defaultGrantedAuthority</definedTerm>
            <definition>
              Specifies the GrantedAuthority to be added to every successfully authenticated user.
              By default, the defaultGrantedAuthority will add a GrantedAuthority for <newTerm>ROLE_USER</newTerm>.  If
              you do not want this behavior, you can set the defaultGrantedAuthority to null (if you do not want a
              GrantedAuthority to be added by default), or some other GrantedAuthority.
            </definition>
            <definedTerm>grantedAuthorityFactory</definedTerm>
            <definition>
              Used to create GrantedAuthority objects for each of the groups to which the authenticated user belongs.
              The default grantedAuthorityFactory will construct GrantedAuthority objects whose string is
              the uppercase group name prefixed with <newTerm>ROLE_</newTerm>.
            </definition>
          </tableDefinition>
        </para>
        <para>
          <code lang="xml">
            <![CDATA[
<bean id="waffleNegotiateSecurityFilter" class="waffle.spring.NegotiateSecurityFilter">
	<property name="Provider" ref="waffleSecurityFilterProviderCollection" />
	<property name="AllowGuestLogin" value="false" />
	<property name="PrincipalFormat" value="fqn" />
	<property name="RoleFormat" value="both" />
</bean>]]>
          </code>
        </para>
      </content>
    </section>
    <section address="waffleSecurityFilterProviderCollection_options">
      <title>Security Filter Provider Collection Options</title>
      <content>
        <para>
          The <newTerm>waffleSecurityFilterProviderCollection</newTerm> bean can be constructed with a list
          of available security filter providers. Waffle supplies a Negotiate and a BASIC authentication
          security filter provider. In addition, each provider may implement more options.
        </para>
        <code lang="xml">
          <![CDATA[
<bean id="waffleSecurityFilterProviderCollection" class="waffle.servlet.spi.SecurityFilterProviderCollection">
	<constructor-arg>
		<list>
			<ref bean="negotiateSecurityFilterProvider" />   			
			<ref bean="basicSecurityFilterProvider" />   			
		</list>
	</constructor-arg>
</bean>]]>
        </code>
      </content>
    </section>
    <section address="negotiateSecurityFilterProvider_options">
      <title>Negotiate Security Filter Provider Options</title>
      <content>
        <para>
          The <newTerm>negotiateSecurityFilterProvider</newTerm> bean supports a list of protocols. Choose
          one or the combination of Negotiate and NTLM.
        </para>
        <code lang="xml">
          <![CDATA[
<bean id="negotiateSecurityFilterProvider" class="waffle.servlet.spi.NegotiateSecurityFilterProvider">
	<constructor-arg ref="waffleWindowsAuthProvider" />
	<property name="protocols">
		<list>
			<value>Negotiate</value>
			<value>NTLM</value>
		</list>
	</property>
</bean>
          ]]>
        </code>
      </content>
    </section>
    <section address="basicSecurityFilterProvider_options">
      <title>Basic Security Filter Provider Options</title>
      <content>
        <para>
          The <newTerm>basicSecurityFilterProvider</newTerm> bean supports a custom Basic authentication Realm name.
        </para>
        <code lang="xml">
          <![CDATA[
<bean id="basicSecurityFilterProvider" class="waffle.servlet.spi.BasicSecurityFilterProvider">
	<constructor-arg ref="waffleWindowsAuthProvider" />
	<property name="realm" value="DemoRealm" />
</bean>
          ]]>
        </code>
      </content>
    </section>
    <section address="demoapplication">
      <title>Waffle Spring-Security Demo</title>
      <content>
        <para>
          A demo application can be found in the Waffle distribution in the <localUri>Samples\waffle-spring-filter</localUri>
          directory. Copy the entire directory into Tomcat's or Jetty's <localUri>webapps</localUri> directory and navigate to
          <ficticiousUri>http://localhost:8080/waffle-spring-filter/</ficticiousUri>.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>